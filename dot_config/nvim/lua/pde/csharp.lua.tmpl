if vim.fn.executable('dotnet') ~= 1 then
  return {}
end

return {
  {
    'williamboman/mason.nvim',
    opts = function(_, opts)
      vim.list_extend(opts.ensure_installed, {
        -- {{- if eq .chezmoi.os "linux" }}
        'netcoredbg',
        -- {{- end }}
        'roslyn',
      })
      vim.list_extend(opts.registries, {
        'github:Crashdummyy/mason-registry',
      })
    end,
  },
  {
    'seblj/roslyn.nvim',
    ft = 'cs',
    opts = {
      filewatching = false,
      config = {
        on_attach = function(client, bufnr)
          require('base.lsp.format').on_attach(client, bufnr)
          require('base.lsp.keymaps').on_attach(client, bufnr)
        end,
        settings = {
          ['csharp|background_analysis'] = {
            dotnet_analyzer_diagnostics_scope = 'fullSolution',
            dotnet_compiler_diagnostics_scope = 'fullSolution',
          },
          ['csharp|code_lens'] = {
            dotnet_enable_references_code_lens = true,
          },
          ['csharp|completion'] = {
            dotnet_show_name_completion_suggestions = true,
            dotnet_show_completion_items_from_unimported_namespaces = true,
            dotnet_provide_regex_completions = true,
          },
          ['csharp|highlighting'] = {
            dotnet_highlight_related_regex_components = true,
            dotnet_highlight_related_json_components = true,
          },
          ['csharp|inlay_hints'] = {
            csharp_enable_inlay_hints_for_implicit_object_creation = true,
            csharp_enable_inlay_hints_for_implicit_variable_types = true,
            csharp_enable_inlay_hints_for_lambda_parameter_types = true,
            csharp_enable_inlay_hints_for_types = true,
            dotnet_enable_inlay_hints_for_indexer_parameters = true,
            dotnet_enable_inlay_hints_for_literal_parameters = true,
            dotnet_enable_inlay_hints_for_object_creation_parameters = true,
            dotnet_enable_inlay_hints_for_other_parameters = true,
            dotnet_enable_inlay_hints_for_parameters = true,
            dotnet_suppress_inlay_hints_for_parameters_that_differ_only_by_suffix = true,
            dotnet_suppress_inlay_hints_for_parameters_that_match_argument_name = true,
            dotnet_suppress_inlay_hints_for_parameters_that_match_method_intent = true,
          },
          ['csharp|symbol_search'] = {
            dotnet_search_reference_assemblies = true,
          },
          ['csharp|type_members'] = {
            dotnet_member_insertion_location = true,
            dotnet_property_generation_behavior = true,
          },
          ['navigation'] = {
            dotnet_navigate_to_decompiled_sources = true,
          },
        },
      },
    },
  },
  {
    'mfussenegger/nvim-dap',
    -- {{- if eq .chezmoi.os "darwin" }}
    dependencies = { 'Cliffback/netcoredbg-macOS-arm64.nvim' },
    -- {{- end }}
    opts = {
      setup = {
        netcoredbg = function(_, _)
          local dap = require('dap')

          vim.g.dotnet_build_project = function()
            local default_path = vim.fn.getcwd() .. '/'
            if vim.g['dotnet_last_proj_path'] ~= nil then
              default_path = vim.g['dotnet_last_proj_path']
            end
            local path = vim.fn.input('Path to your *proj file', default_path, 'file')
            vim.g['dotnet_last_proj_path'] = path
            local cmd = 'dotnet build -c Debug ' .. path .. ' > /dev/null'
            print('')
            print('Cmd to execute: ' .. cmd)
            local f = os.execute(cmd)
            if f == 0 then
              print('\nBuild: ✔️ ')
            else
              print('\nBuild: ✗ (code: ' .. f .. ')')
            end
          end

          -- TODO: Custom logic to find the dll of the current project
          -- * If a parent solution exists, get a list of all the csproj files found
          -- * Add picker for selecting the project to execute (from the list above)
          -- * Find the dll in the /bin/Debug directory of the picked project
          -- * Handle when multiple matches (when multiple dotnet targets)
          -- * Cache the selection (or persist it) and pre-select the entry in the list above
          -- * Maybe with this selection, also rebuild the project (always and without asking?)

          vim.g.dotnet_get_dll_path = function()
            local request = function()
              return vim.fn.input('Path to dll', vim.fn.getcwd() .. '/bin/Debug/', 'file')
            end

            if vim.g['dotnet_last_dll_path'] == nil then
              vim.g['dotnet_last_dll_path'] = request()
            else
              if vim.fn.confirm('Change path to dll?\n' .. vim.g['dotnet_last_dll_path'], '&yes\n&no', 2) == 1 then
                vim.g['dotnet_last_dll_path'] = request()
              end
            end

            return vim.g['dotnet_last_dll_path']
          end

          dap.configurations.cs = {
            {
              name = 'launch - netcoredbg',
              type = 'coreclr',
              request = 'launch',
              program = function()
                if vim.fn.confirm('Recompile first?', '&yes\n&no', 2) == 1 then
                  vim.g.dotnet_build_project()
                end
                return vim.g.dotnet_get_dll_path()
              end,
            },
          }

          -- {{- if eq .chezmoi.os "darwin" }}
          local netcoredbg = vim.fn.stdpath('data') .. '/lazy/netcoredbg-macOS-arm64.nvim/netcoredbg/netcoredbg'
          -- {{- else }}
          local netcoredbg = require('mason-registry').get_package('netcoredbg'):get_install_path() .. '/netcoredbg'
          -- {{- end }}

          local adapter_config = {
            type = 'executable',
            command = netcoredbg,
            args = { '--interpreter=vscode' },
          }
          dap.adapters.coreclr = adapter_config
          dap.adapters.netcoredbg = adapter_config
        end,
      },
    },
  },
  {
    'nvim-neotest/neotest',
    dependencies = {
      'Issafalcon/neotest-dotnet',
    },
    opts = function(_, opts)
      opts.adapters = opts.adapters or {}
      vim.list_extend(opts.adapters, {
        require('neotest-dotnet'),
      })
    end,
  },
}
